@namespace BulmaRazor.Components
@typeparam TItem
@using BulmaRazor.Utils
@using System.Diagnostics
@inherits BulmaComponentBase

@if (WithContainer)
{
    <div class="table-container">
        @RenderTable
    </div>
}
else
{
    @:@RenderTable
}
<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@code{

    RenderFragment<DataTableColumn<TItem>> RenderHeaderContent => col =>
        @<span>
            @if (col.ThSlot != null)
            {
                @:@col.ThSlot
            }
            else
            {
                @:@col.Label 
            }
        </span>;

    RenderFragment RenderTable =>
        @<table @attributes="Attributes" class="@classes">
            @if (!NoHeader)
            {
                <thead>
                <tr>
                    @foreach (var col in columns)
                    {
                        <th class="@B.Join(col.ThClass, ThClass)" style="@B.JoinStyle(col.thStyle, ThStyle)">

                            @if (col.IsCheckBox)
                            {
                                <CheckBox @ref="cball" TValue="string" OnCheckedChanged="checkAll" Checked="col.checkedAll">
                                   @RenderHeaderContent(col)
                                </CheckBox>
                            }
                            else
                            {
                                if (col.Sortable)
                                {
                                    <IconText class="@B.Clickable" @onclick="() => Sort(col)">
                                        @RenderHeaderContent(col)
                                        <Icon class="@getSortIconClass(col)" IconClass="@getSortIconClassName(col)"></Icon>
                                    </IconText>
                                }
                                else
                                {
                                    @:@RenderHeaderContent(col)
                                }
                                if (col.Filterable)
                                {
                                    <Dropdown @bind-IsActive="col.FilterShow" IsRight IsClickTrigger
                                               class="@B.PulledRight"
                                               ContentStyle="max-height: 300px;overflow-y: auto; font-weight:lighter">
                                        <TriggerSlot>
                                            &nbsp;<Icon class="@getFilterIconClass(col)" IconClass="fa fa-filter"></Icon>&nbsp;
                                        </TriggerSlot>
                                        <MenuSlot>
                                            <CheckBoxes @bind-Values="col.Filters">
                                                @foreach (var filterItem in col.AllFilters)
                                                {
                                                    <DropdownItem>
                                                        <CheckBox IsSmall="IsNarrow" Color="Color" Value="filterItem" TValue="string">@filterItem</CheckBox>
                                                    </DropdownItem>
                                                }
                                            </CheckBoxes>
                                            <DropdownDivider class="@B.MY1"/>
                                            <DropdownItem>
                                                <Buttons>
                                                    <Button IsSmall="IsNarrow" Color="Color" @onclick="() => DoFilter(col)">筛选</Button>
                                                    <Button IsSmall="IsNarrow" @onclick="() => ResetFilter(col)">重置</Button>
                                                </Buttons>
                                            </DropdownItem>
                                        </MenuSlot>
                                    </Dropdown>
                                }
                            }
                        </th>
                    }
                </tr>
                </thead>
            }
            <tbody>
            @foreach (var row in dataView)
            {
                if (row.IsHidden) continue;
                DataTableColumn<TItem> expandColumn = null;
                <tr class="@CssBuilder.Css(B.Selected, row.IsSelected)" @onclick="() => TrClick(row)">
                    @foreach (var col in columns)
                    {
                        <td class="@B.Join(col.TdClass, TdClass)" style="@B.JoinStyle(col.TdStyle, TdStyle)">
                            @if (col.IsIndex)
                            {
                                @:@(row.Index + 1)
                            }
                            else if (col.IsCheckBox)
                            {
                                <span>
                                    <CheckBox TValue="string" OnCheckedChanged="b => CheckBoxClick(row, b)" @bind-Checked="@row.IsChecked">@col.ChildContent?.Invoke(row.Item)</CheckBox>
                                </span>
                            }
                            else if (col.IsExpand)
                            {
                                expandColumn = col;
                                if (row.IsExpanded)
                                {
                                    <Icon class="@B.Clickable" @onclick="() => TaggleExpand(row)" IconClass="fa fa-angle-down"></Icon>
                                }
                                else
                                {
                                    <Icon class="@B.Clickable" @onclick="() => TaggleExpand(row)" IconClass="fa fa-angle-right"></Icon>
                                }
                            }
                            else
                            {
                                if (col.ChildContent != null)
                                {
                                    @:@col.ChildContent(row.Item) 
                                }
                                else if (col.TdSlot != null)
                                {
                                    @:@col.TdSlot(row.Item)
                                }
                                else
                                {
                                    var field = row.Fields[col.Prop];
                                    @:@field.ShowValue
                                }
                            }
                        </td>
                    }
                </tr>
                if (expandColumn != null && row.IsExpanded)
                {
                    <tr>
                        <td colspan="@columns.Count">
                            @expandColumn.ExpandSlot(row.Item)
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>;

}