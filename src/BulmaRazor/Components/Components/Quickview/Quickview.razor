@inherits BulmaComponentBase
@namespace BulmaRazor.Components
@inject BulmaRazorJsInterop JsInterop

<div id="@Id" @attributes="Attributes" class="@classes">
    <header class="quickview-header">
        <p class="title">
            @if (HeaderSlot != null)
            {
                <text>@HeaderSlot</text>
            }
            else
            {
                <text>@HeaderText</text>
            }
        </p>
        <span class="delete" @onclick="Hide" data-dismiss="quickview"></span>
    </header>

    <div class="quickview-body">
        <div class="quickview-block">
            @(BodySlot ?? ChildContent)
        </div>
    </div>

    @if (FooterSlot != null)
    {
        <footer class="quickview-footer">
            @FooterSlot
        </footer>
    }
</div>

@code {

    readonly string Id = "quickview_" + Guid.NewGuid().ToString("N");

    string classes => CssBuilder.Default("quickview")
        .AddClassFromAttributes(Attributes)
        .AddClass("is-active", IsActive)
        .Build();

    [Parameter]
    public bool IsActive { get; set; }

    public void Show()
    {
        IsActive = true;
        StateHasChanged();
    }

    public void Hide()
    {
        if (IsActive)
        {
            IsActive = false;
            StateHasChanged();
        }
    }

    public void Toggle()
    {
        IsActive = !IsActive;
        StateHasChanged();
    }

    [Parameter]
    public string TriggerSelector { get; set; }
    [Parameter]
    public string HeaderText { get; set; }

    [Parameter]
    public RenderFragment HeaderSlot { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment BodySlot { get; set; }

    [Parameter]
    public RenderFragment FooterSlot { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JsInterop.BindClickWithoutSelf(Id,TriggerSelector);
    }

    protected override Task OnInitializedAsync()
    {
        JSCallbackManager.AddEventHandler(Id, "clickWithoutSelf", new Action(() => { Hide(); }));
        return base.OnInitializedAsync();
    }

    protected override ValueTask DisposeAsync(bool disposing)
    {
        JSCallbackManager.DisposeObject(Id);
        return base.DisposeAsync(disposing);
    }

}