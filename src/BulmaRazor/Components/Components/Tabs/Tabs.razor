@namespace BulmaRazor.Components
@inherits BulmaComponentBase


<div @attributes="AdditionalAttributes" class="@classes">
    <ul>
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </ul>
</div>

@code{
    string classes => CssBuilder.Default("tabs")
        .AddClassFromAttributes(AdditionalAttributes)
        .AddClass(Size.Value, Size.Value)
        .AddClass("is-boxed", IsBoxed)
        .AddClass("is-toggle", IsToggle || IsToggleRounded)
        .AddClass("is-toggle-rounded", IsToggleRounded)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass("is-centered", IsCentered)
        .Build();




    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public Size IconSize { get; set; } = Size.Small;

    [Parameter]
    public bool IsBoxed { get; set; }

    [Parameter]
    public bool IsToggle { get; set; }

    [Parameter]
    public bool IsToggleRounded { get; set; }

    [Parameter]
    public bool IsFullwidth { get; set; }
    [Parameter]
    public bool IsCentered { get; set; }


    private List<TabsItem> items = new List<TabsItem>();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private int index = 0;
    public void AddItem(TabsItem item)
    {
        item.Index = index++;
        items.Add(item);
    }

    [Parameter]
    public EventCallback<TabsItem> OnItemClick { get; set; }

    public async Task ClickItem(TabsItem currItem)
    {
        foreach (var item in items)
        {
            item.Active(item == currItem);
        }
        if (OnItemClick.HasDelegate)
        {
            await OnItemClick.InvokeAsync(currItem);
        }
    }
}