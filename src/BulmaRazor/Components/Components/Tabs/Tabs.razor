@namespace BulmaRazor.Components
@inherits BulmaComponentBase


<div @attributes="AdditionalAttributes" class="@classes">
    <ul>
        @foreach (var item in Items)
        {
            <li class='@(item.IsActive?"is-active":"")' @onclick="((e)=>HandleClick(item))">
                <a>
                    @if (item.IconClass.HasValue())
                    {
                        <span class="@getIconClass(item)">
                            <i class="@item.IconClass" aria-hidden="true"></i>
                        </span>
                        <span>@item.Text</span>
                    }
                    else
                    {
                        <text>@item.Text</text>
                    }
                </a>
            </li>
        }
    </ul>
</div>

@code{
    string classes => CssBuilder.Default("tabs")
        .AddClassFromAttributes(AdditionalAttributes)
        .AddClass(Size.Value, Size.Value)
        .AddClass("is-boxed", IsBoxed)
        .AddClass("is-toggle", IsToggle || IsToggleRounded)
        .AddClass("is-toggle-rounded", IsToggleRounded)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass("is-centered", IsCentered)
        .Build();

    string getLiClass(TabItem item) => CssBuilder.Default("")
        .AddClass("is-active", item.IsActive)
        .Build();

    string getIconClass(TabItem item) => CssBuilder.Default("icon")
        .AddClass(IconSize.Value, IconSize.Value)
        .Build();



    [Parameter]
    public ICollection<TabItem> Items { get; set; }

    [Parameter]
    public Size Size { get; set; } = Size.Default;

[Parameter]
     public Size IconSize{get;set;}= Size.Small;

    [Parameter]
    public bool IsBoxed { get; set; }

    [Parameter]
    public bool IsToggle { get; set; }

    [Parameter]
    public bool IsToggleRounded { get; set; }

    [Parameter]
    public bool IsFullwidth { get; set; }
    [Parameter]
    public bool IsCentered { get; set; }

    private Task HandleClick(TabItem item)
    {
        foreach (var it in Items)
        {
            it.IsActive = it == item;
        }
        if (OnItemSelected.HasDelegate)
        {
            return OnItemSelected.InvokeAsync(item);
        }
        return Task.CompletedTask;
    }

    [Parameter]
    public EventCallback<TabItem> OnItemSelected { get; set; }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
       

        await base.SetParametersAsync(parameters);
        
        if (!Items.Any(x => x.IsActive))
        {
            Items.FirstOrDefault().IsActive = true;
        }
    }
}