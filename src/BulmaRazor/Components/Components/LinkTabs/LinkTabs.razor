@namespace BulmaRazor.Components
@inherits BulmaComponentBase


<div @attributes="Attributes" class="@classes">
    <ul>
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </ul>
</div>

@code{

    string classes => CssBuilder.Default("tabs")
        .AddClassFromAttributes(Attributes)
        .AddClass("is-small", IsSmall)
        .AddClass("is-medium", IsMedium)
        .AddClass("is-large", IsLarge)
        .AddClass("is-boxed", IsBoxed)
        .AddClass("is-toggle", IsToggle || IsToggleRounded)
        .AddClass("is-toggle-rounded", IsToggleRounded)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass("is-centered", IsCentered)
        .AddClass("is-right", IsRight)
        .Build();


    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public bool IsMedium { get; set; }

    [Parameter]
    public bool IsLarge { get; set; }

    [Parameter]
    public bool IsBoxed { get; set; }

    [Parameter]
    public bool IsToggle { get; set; }

    [Parameter]
    public bool IsToggleRounded { get; set; }

    [Parameter]
    public bool IsFullwidth { get; set; }

    [Parameter]
    public bool IsCentered { get; set; }

    [Parameter]
    public bool IsRight { get; set; }


    private List<LinkTabItem> items = new List<LinkTabItem>();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private int index = 0;

    public void AddItem(LinkTabItem item)
    {
        item.Index = index++;
        items.Add(item);
    }

    [Parameter]
    public EventCallback<LinkTabItem> OnItemClick { get; set; }

    public async Task ClickItem(LinkTabItem currItem)
    {
        foreach (var item in items)
        {
            item.Active(item == currItem);
        }
        await OnItemClick.InvokeAsync(currItem);
    }

}