@namespace BulmaRazor.Components

@inherits BulmaComponentBase
@typeparam TValue


<input @attributes="Attributes" @bind-value="@ShowValue" @bind-value:event="@BindEvent"
    class="@classes" />

@code {
    string classes => CssBuilder.Default("input")
        .AddClassFromAttributes(Attributes)
        .AddClass(Color.Value, Color.Value)
        .AddClass(Size.Value, Size.Value)
        .AddClass("is-rounded", IsRounded)
        .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-static", IsStatic)
        .Build();

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }

    [Parameter]
    public bool IsStatic { get; set; }

    [Parameter]
    public string BindEvent { get; set; } = "onchange";

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public string Format { get; set; }

    private string ShowValue
    {
        get
        {
            return ExtendMethods.GetShowValue(Value,Format);
        }
        set
        {
            if (value.SetRealValue(out TValue val))
            {
                Value = val;
                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(Value).GetAwaiter().GetResult();
                }
            }
        }
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (typeof(TValue).IsNumber())
        {
            if (!Attributes.ContainsKey("type"))
            {
                Attributes.Add("type", "number");
            }
        }
    }
}
