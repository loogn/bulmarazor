@namespace BulmaRazor.Components

@inherits BulmaComponentBase


<div class="@controlCls">
    <div class="@selectCls">
        <select @attributes="AdditionalAttributes"
                @onchange="OnChangeHandle"
                disabled="@Disabled"
                multiple="@Multiple">
            @if (Items != null)
            {
                foreach (var gp in Items.GroupBy(x => x.GroupName))
                {
                    if (gp.Key.HasValue())
                    {
                        <optgroup label="@gp.Key">
                            @foreach (var item in gp)
                            {
                                <option selected="@item.Selected" value="@item.Value">@item.Text</option>
                            }
                        </optgroup>
                    }
                    else
                    {
                        @foreach (var item in gp)
                        {
                            <option selected="@item.Selected" value="@item.Value">@item.Text</option>
                        }
                    }
                }
            }
            else
            {
                @:@ChildContent
            }
        </select>
    </div>
    @if (LeftIcon.HasValue())
    {
        <Icon Color="textColor" Size="Size" class="is-left" IconClass="@LeftIcon"></Icon>
    }
</div>

@code {
    string controlCls => CssBuilder.Default("control")
        .AddClassFromAttributes(AdditionalAttributes)
        .AddClass(Size.Value, Size.Value.HasValue() && IsLoading)
        .AddClass("is-multiple", Multiple)
        .AddClass("has-icons-left", LeftIcon)
        .Build();

    string selectCls => CssBuilder.Default("select")
        .AddClass("is-multiple", Multiple)
        .AddClass("is-rounded", IsRounded)
         .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-loading", IsLoading)
        .AddClass(Color.Value, Color.Value)
        .AddClass(Size.Value, Size.Value)
        .Build();

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<SelectItem> OnSelectChanged { get; set; }

    private async Task OnChangeHandle(ChangeEventArgs e)
    {
        var val = e.Value.ToString();
        await ValueChanged.InvokeAsync(val);

        var item = Items.FirstOrDefault(x => x.Value == val);
        await OnSelectChanged.InvokeAsync(item);
    }

    [Parameter]
    public IList<SelectItem> Items { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public bool Multiple { get; set; }
    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }

    [Parameter]
    public string LeftIcon { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private TextColor textColor = TextColor.Default;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<Color>("Color", out Color color))
        {
            textColor = color.ToTextColor();
        }

        return base.SetParametersAsync(parameters);
    }

}
