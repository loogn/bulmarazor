@namespace BulmaRazor.Components
@inherits BulmaComponentBase
@inject BulmaRazorJsInterop JsInterop
@typeparam TValue

<input id="@Id" @bind-value="@ShowValue" @bind-value:event="@BindEvent" 
       class="@classes" @attributes="Attributes"/>

@code {

    string classes => CssBuilder.Default("input")
        .AddClassFromAttributes(Attributes)
        .AddClass(Color.Value, Color.Value)
        .AddClass("is-small", IsSmall)
        .AddClass("is-normal", IsNormal)
        .AddClass("is-medium", IsMedium)
        .AddClass("is-large", IsLarge)
        .AddClass("is-rounded", IsRounded)
        .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-static", IsStatic)
        .Build();

    [Parameter]
    public Color Color { get; set; } = Color.Default;


    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public bool IsNormal { get; set; }

    [Parameter]
    public bool IsMedium { get; set; }

    [Parameter]
    public bool IsLarge { get; set; }

    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }

    [Parameter]
    public bool IsStatic { get; set; }

    [Parameter]
    public string BindEvent { get; set; } = "onchange";

    [Parameter]
    public string Format { get; set; }

    private string Id = "datepicker_" + Guid.NewGuid().ToString("N");
    private IJSObjectReference _obj;

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }


    [Parameter]
    public DatePickerOptions Options { get; set; }

    private string ShowValue
    {
        get { return ExtendMethods.GetShowValue(Value, Options.Format); }
        set
        {
            if (value.SetRealValue(out TValue val))
            {
                Value = val;
                ValueChanged.InvokeAsync(Value).GetAwaiter().GetResult();
            }
        }
    }


    [Parameter]
    public EventCallback OnShow { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnChangeDate { get; set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Options ??= new DatePickerOptions();
        if (Format.HasValue())
        {
            Options.Format = Format;
        }
    }

    protected override void OnInitialized()
    {
        JSCallbackManager.AddEventHandler(Id, "show", new Func<Task>(() => OnShow.InvokeAsync()));
        JSCallbackManager.AddEventHandler(Id, "hide", new Func<Task>(() => OnHide.InvokeAsync()));
        JSCallbackManager.AddEventHandler(Id, "changeDate", new Func<Dictionary<string,object>,Task>((dict) =>
        {
            var value = dict["date"].ToString();
            ShowValue = value;
            return OnChangeDate.InvokeAsync();
        }));
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _obj = await JsInterop.DatePickerInit(Id, Options);
        }
    }

    protected override async ValueTask DisposeAsync(bool disposing)
    {
        JSCallbackManager.DisposeObject(Id);
        if (_obj != null)
        {
            await _obj.DisposeAsync();
        }
    }

    public ValueTask Show()
    {
        return JsInterop.DatePickerShow(Id);
    }

    public ValueTask Hide()
    {
        return JsInterop.DatePickerHide(Id);
    }

}