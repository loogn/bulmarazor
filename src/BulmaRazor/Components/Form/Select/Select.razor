@namespace BulmaRazor.Components

@inherits BulmaComponentBase
@typeparam TValue

<div class="@selectCls">
    <select @attributes="Attributes" @onchange="ChangeHandle" multiple="@Multiple" size="@Rows">
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </select>
</div>

@code {
    string selectCls => CssBuilder.Default("select")
        .AddClass("is-multiple", Multiple)
        .AddClass("is-rounded", IsRounded)
        .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-loading", IsLoading)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass(Color.Value, Color.Value)
        .AddClass(Size.Value, Size.Value)
        .Build();

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public bool IsFullwidth { get; set; }

    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }


    [Parameter]
    public RenderFragment ChildContent { get; set; }


    private TValue _value;
    [Parameter]
    public TValue Value
    {
        get { return _value; }
        set
        {
            _value = value;
            foreach (var item in items)
            {
                item.SetSelected(item.Value.Equals(_value));
            }
        }
    }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    private async Task ChangeHandle(ChangeEventArgs e)
    {
        if (Multiple)
        {
            _values.Clear();
            foreach (var item in items)
            {
                if (await item.GetSelected())
                {
                    _values.Add(item.Value);
                }
            }
            if (ValuesChanged.HasDelegate)
            {
                await ValuesChanged.InvokeAsync(_values);
            }
        }
        else
        {
            if (e.Value.ToString().SetRealValue<TValue>(out TValue val))
            {
                _value = val;
                if (ValueChanged.HasDelegate)
                {
                    await ValueChanged.InvokeAsync(_value);
                }
            }
        }
    }

    private List<Option<TValue>> items { get; set; } = new List<Option<TValue>>();

    private int index = 0;
    public void AddItem(Option<TValue> item)
    {
        item.Index = index++;
        items.Add(item);
    }


    @* [Parameter] *@
    public bool Multiple { get; set; }
    @* [Parameter] *@
    public int Rows { get; set; }



    private HashSet<TValue> _values;
    @* [Parameter] *@
    public HashSet<TValue> Values
    {
        get { return _values; }
        set
        {
            _values = value;
            foreach (var item in items)
            {
                item.SetSelected(_values.Contains(item.Value));
            }
        }
    }

    @* [Parameter] *@
    public EventCallback<HashSet<TValue>> ValuesChanged { get; set; }

}
