@namespace BulmaRazor.Components

@inherits BulmaComponentBase
@typeparam TValue

<div class="@selectCls">
    <select @attributes="Attributes" @onchange="ChangeHandle">
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </select>
</div>

@code {

    string selectCls => CssBuilder.Default("select")
        .AddClass("is-rounded", IsRounded)
        .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-loading", IsLoading)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass(Color.Value, Color.Value)
        .AddClass("is-small", IsSmall)
        .AddClass("is-normal", IsNormal)
        .AddClass("is-medium", IsMedium)
        .AddClass("is-large", IsLarge)
        .Build();

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public bool IsNormal { get; set; }

    [Parameter]
    public bool IsMedium { get; set; }

    [Parameter]
    public bool IsLarge { get; set; }

    [Parameter]
    public bool IsFullwidth { get; set; }

    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }


    [Parameter]
    public RenderFragment ChildContent { get; set; }


    private TValue _value;

    [Parameter]
    public TValue Value
    {
        get { return _value; }
        set
        {
            _value = value;
            foreach (var item in items)
            {
                item.SetSelected(item.Value.Equals(_value));
            }
        }
    }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    private async Task ChangeHandle(ChangeEventArgs e)
    {
        if (e.Value.ToString().SetRealValue<TValue>(out TValue val))
        {
            _value = val;
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(_value);
            }
        }
    }

    private List<Option<TValue>> items { get; set; } = new();

    private int index = 0;

    public void AddItem(Option<TValue> item)
    {
        item.Index = index++;
        items.Add(item);
    }

}