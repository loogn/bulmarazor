@namespace BulmaRazor.Components
@using System.Text.RegularExpressions
@inherits InputBase<string>
@inject IJSRuntime JsRuntime
<input id="@Id" @attributes="Attributes" @bind-value="ShowValue" @bind-value:event="@BindEvent"
       class="@classes"/>

@code {


    [Parameter]
    public ColorPickerOptions Options { get; set; }

    private string ShowValue
    {
        get { return Value; }
        set
        {
            Value = value;
            ValueChanged.InvokeAsync(Value).GetAwaiter().GetResult();
        }
    }

    // [Parameter]
    // public EventCallback<TagsInput> AfterAdd { get; set; }
    //
    // [Parameter]
    // public EventCallback<TagsInput> AfterRemove { get; set; }


    protected override void OnInitialized()
    {
        Options ??= new ColorPickerOptions();
    // JSCallbackManager.AddEventHandler(Id, "after.add", new Func<Dictionary<string, object>, Task>((dict) =>
    // {
    //     ShowValue = dict["value"].ToString();
    //     return AfterAdd.InvokeAsync(this);
    // }));
    // JSCallbackManager.AddEventHandler(Id, "after.remove", new Func<Dictionary<string, object>, Task>((dict) =>
    // {
    //     ShowValue = dict["value"].ToString();
    //     return AfterRemove.InvokeAsync(this);
    // }));
    // JSCallbackManager.AddEventHandler(Id, "after.flush", new Func<Dictionary<string, object>, Task>((dict) =>
    // {
    //     ShowValue = "";
    //     return AfterRemove.InvokeAsync(this);
    // }));
        base.OnInitialized();
    }

    protected override ValueTask DisposeAsync(bool disposing)
    {
        JSCallbackManager.DisposeObject(Id);
        return base.DisposeAsync(disposing);
    }

    private IJSObjectReference jsObj;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            jsObj = await JsRuntime.InvokeAsync<IJSObjectReference>("BulmaRazor.NewJsColor", "#" + Id, Options.ToParams());
    // jsObj = await JsInterop.JSColorInit(Id, Options);
        }
    }

}