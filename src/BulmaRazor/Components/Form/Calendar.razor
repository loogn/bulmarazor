@namespace BulmaRazor.Components
@inherits BulmaComponentBase
@inject BulmaRazorJsInterop JsInterop
@using System.Diagnostics.Contracts
@typeparam TValue

<input id="@id" @attributes="Attributes"/>

@code {

    string classes => CssBuilder.Default()
        .AddClassFromAttributes(Attributes)
        .Build();

    private string id = "calender_" + Guid.NewGuid().ToString("N");
    private IJSObjectReference _obj;

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public string Format { get; set; }

    [Parameter]
    public CalenderOptions Options { get; set; }

    private string ShowValue
    {
        get { return ExtendMethods.GetShowValue(Value, Format); }
        set
        {
            if (value.SetRealValue(out TValue val))
            {
                Value = val;
                ValueChanged.InvokeAsync(Value).GetAwaiter().GetResult();
            }
        }
    }

    [Parameter]
    public EventCallback<Calendar<TValue>> OnSelect { get; set; }

    [Parameter]
    public EventCallback<Calendar<TValue>> OnReady { get; set; }

    [Parameter]
    public EventCallback<Calendar<TValue>> OnShow { get; set; }

    [Parameter]
    public EventCallback<Calendar<TValue>> OnHide { get; set; }

    // [Parameter]
    // public EventCallback<Calendar<TValue>> OnSelectStart { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Attributes.Add("value", ShowValue);
        JSCallbackManager.AddEventHandler(id, "select", new Func<string,Task>(s =>
        {
            ShowValue = s;
            return OnSelect.InvokeAsync(this);
        }));
        JSCallbackManager.AddEventHandler(id, "ready", new Func<string,Task>(s => OnReady.InvokeAsync(this)));
        JSCallbackManager.AddEventHandler(id, "show", new Func<string,Task>(s => OnShow.InvokeAsync(this)));
        JSCallbackManager.AddEventHandler(id, "hide", new Func<string,Task>(s => OnHide.InvokeAsync(this)));
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (!Attributes.ContainsKey("type"))
        {
            Attributes.Add("type", "date");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _obj = await JsInterop.CalendarAttach(id, Options);
        }
    }

    #region Calendar Funs

    public void Show()
    {
        _obj?.InvokeVoidAsync("show");
    }

    public void Hide()
    {
        _obj?.InvokeVoidAsync("hide");
    }

    public ValueTask<bool> IsOpen()
    {
        return _obj?.InvokeAsync<bool>("isOpen") ?? new ValueTask<bool>(false);
    }

    public void Refresh()
    {
        _obj?.InvokeVoidAsync("refresh");
    }

    public void Save()
    {
        _obj?.InvokeVoidAsync("save");
    }

    public void Clear()
    {
        _obj?.InvokeVoidAsync("clear");
    }

    #endregion

    protected override async ValueTask DisposeAsync(bool disposing)
    {
        JSCallbackManager.DisposeObject(id);
        if (_obj != null)
        {
            await _obj.DisposeAsync();
        }
    }
}