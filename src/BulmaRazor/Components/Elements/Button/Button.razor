@namespace BulmaRazor.Components
@inherits BulmaComponentBase

@if (hasHref)
{
    <a @attributes="Attributes" class="@classes">@ChildContent</a>
}
else
{
    <button @attributes="Attributes" class="@classes">@ChildContent</button>
}


@code {

    string classes => CssBuilder.Default("button")
        .AddClassFromAttributes(Attributes)
        .AddClass(Color.Value, Color.Value)
        .AddClass("is-small", IsSmall)
        .AddClass("is-normal", IsNormal)
        .AddClass("is-medium", IsMedium)
        .AddClass("is-large", IsLarge)
        .AddClass("is-light", IsLight)
        .AddClass("is-fullwidth", IsFullwidth)
        .AddClass("is-outlined", IsOutlined)
        .AddClass("is-inverted", IsInverted)
        .AddClass("is-rounded", IsRounded)
        .AddClass("is-hovered", IsHovered)
        .AddClass("is-focused", IsFocused)
        .AddClass("is-active", IsActive)
        .AddClass("is-loading", IsLoading)
        .AddClass("is-static", IsStatic)
        .AddClass("is-selected", IsSelected)
        .Build();

    [Parameter]
    public Color Color { get; set; } = Color.Default;
    
    [Parameter]
    public bool IsSmall { get; set; }
    [Parameter]
    public bool IsNormal { get; set; }
    [Parameter]
    public bool IsMedium { get; set; }
    [Parameter]
    public bool IsLarge { get; set; }

    //
    // public static readonly Size Small = new Size("is-small");
    //    public static Size Normal = new Size("is-normal");
    //    public static Size Medium = new Size("is-medium");
    //    public static Size Large = new Size("is-large");
    //


    [Parameter]
    public bool IsLight { get; set; }

    [Parameter]
    public bool IsFullwidth { get; set; }

    [Parameter]
    public bool IsOutlined { get; set; }

    [Parameter]
    public bool IsInverted { get; set; }

    [Parameter]
    public bool IsRounded { get; set; }


    [Parameter]
    public bool IsHovered { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsStatic { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool hasHref;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        hasHref = Attributes.ContainsKey("href");
        if (!Attributes.ContainsKey("type"))
        {
            Attributes["type"] = "button";
        }
    }

}